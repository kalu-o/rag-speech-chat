name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target (dockerhub or gcp)'
        required: true
        default: 'dockerhub'

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.15
      - name: Install Poetry
        run: pip install poetry==1.8.5
      - name: Install dependencies
        run: poetry install --sync

  build:
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.15
      - name: Install Poetry
        run: pip install poetry==1.8.5
      - name: Build project
        run: |
          poetry build
          poetry export -o requirements.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Upload requirements
        uses: actions/upload-artifact@v3
        with:
          name: requirements
          path: requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.15
      - name: Install Poetry
        run: pip install poetry==1.8.5
      - name: Run Unit Tests
        run: |
          poetry install
          poetry run pytest --verbose --junit-xml=junit.xml --cov --cov-report=xml test/unit_test.py
        env:
          DEBIAN_FRONTEND: noninteractive
          RETURN_SOURCE_DOCUMENTS: True
          VECTOR_COUNT: "2"
          CHUNK_SIZE: "1500"
          CHUNK_OVERLAP: "150"
          LLM_TYPE: "gpt-3.5-turbo"
          EMBEDDING_LLM_TYPE: "all-MiniLM-L6-v2"
          TEMPERATURE: "0.01"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: junit.xml

  publish_image:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v3
      - name: Download Artifacts (dist)
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist
      - name: Authenticate Docker Registry
        if: inputs.deployment_target == 'dockerhub'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and Push Docker Image
        if: inputs.deployment_target == 'dockerhub'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/rag-speech-chat:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/rag-speech-chat:latest
      - name: Authenticate GCP
        if: inputs.deployment_target == 'gcp'
        run: |
          echo "${{ secrets.GCP_KEY }}" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
      - name: Build and Push to GCP Artifact Registry
        if: inputs.deployment_target == 'gcp'
        run: |
          gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/rag-speech-chat:latest